# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MosaicBuilder
                                 A QGIS plugin
 Copy a selected feature (without characteristics) to a scratch layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-06-30
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Dorset Council
        email                : gis@dorsetcouncil.gov.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QLabel
from qgis.core import QgsSnappingUtils, QgsMessageLog, Qgis
from functools import partial

from .mosaic_builder_canvastools import pointTool, areaTool

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .mosaic_builder_dialog import MosaicBuilderDialog
import os.path


class MosaicBuilder:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MosaicBuilder_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Mosaic Builder')
        #Create a toolbar for the plugin
        self.plugin_bar = self.iface.addToolBar("Mosaic Builder")
        self.plugin_bar.setObjectName(u'Mosaic Builder')

        #Define canvas tools
        self.pointTool = pointTool(iface.mapCanvas())
        self.pointTool.canvasClicked.connect(self.selectByClick)
        self.discTool = pointTool(iface.mapCanvas())
        self.discTool.canvasClicked.connect(self.bufferByClick)
        self.areaTool = areaTool(iface.mapCanvas())
        self.areaTool.canvasClicked.connect(self.selectByArea)

        #Override snapping 
        self.iface.mapCanvas().snappingUtils().setIndexingStrategy(QgsSnappingUtils.IndexExtent)

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MosaicBuilder', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        set_checkable=False,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Helper function that add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param set_checkable: A flag indicating that the action should be set
            as checkable. Defaults to False.
        :type set_checkable: bool

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        if set_checkable:
            action.setCheckable(True)
        action.triggered.connect(partial(callback, action))
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.plugin_bar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        plugin_bar_text = QLabel(
            QCoreApplication.translate('MosaicBuilder', 'Mosaic Builder:')
            )
        #No action to connect to this!
        self.plugin_bar.addWidget(plugin_bar_text)
        
        # Select feature by click button
        select_feature = self.add_action(
            icon_path=':/plugins/mosaic_builder/icons/select.png',
            text=self.tr(u'Select feature by click'),
            set_checkable=True,
            callback=self.selectFeature
        )

        #Select features by drag tool
        select_features = self.add_action(
            icon_path=':/plugins/mosaic_builder/icons/selectArea.png',
            text=self.tr(u'Select features by box'),
            set_checkable=True,
            callback=self.selectArea
        )

        # Add discs by click button
        select_point = self.add_action(
            icon_path=':/plugins/mosaic_builder/icons/disc.png',
            text=self.tr(u'Add disc by click'),
            set_checkable=True,
            callback=self.addDisc
        )

        # Add merge button
        merge_features = self.add_action(
            icon_path=':/plugins/mosaic_builder/icons/merge.png',
            text=self.tr(u'Merge selected features'),
            callback=self.mergeFeatures
        )

        # Add copy button
        copy_mosaic = self.add_action(
            icon_path=':/plugins/mosaic_builder/icons/copy.png',
            text=self.tr(u'Copy to clipboard'),
            callback=self.copyMosaic
        )

        # Add delete button
        reset_mosaic = self.add_action(
            icon_path=':/plugins/mosaic_builder/icons/clear.png',
            text=self.tr(u'Remove current vector mosaic'),
            callback=self.clearMosaic
        )
        
        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Mosaic Builder'),
                action)

        del self.plugin_bar

        try:
            self.pointTool.canvasClicked.disconnect(self.selectByClick)
            self.areaTools.canvasClicked.disconnect(self.selectByArea)
            self.discTool.canvasClicked.disconnect(self.bufferByClick)
        except:
            pass

        #Reset default snapping option
        self.iface.mapCanvas().snappingUtils().setIndexingStrategy(QgsSnappingUtils.IndexHybrid)

    #--------------------------------------------
    # Select tool
    def selectFeature(self, action):
        #QgsMessageLog.logMessage("This is a test log", "Mosaic Builder", level=Qgis.Info)
        self.iface.mapCanvas().setMapTool(self.pointTool)
        self.pointTool.deactivated.connect(partial(self.toggleChecked, action))
        callingAction = action.sender()
        if callingAction:
            callingAction.setChecked(True)

        #TODO - add this functionality
        pass

    #--------------------------------------------
    # Area Select tool
    def selectArea(self, action):
        self.iface.mapCanvas().setMapTool(self.areaTool)
        self.areaTool.deactivated.connect(partial(self.toggleChecked, action))
        callingAction = action.sender()
        if callingAction:
            callingAction.setChecked(True)

        #TODO - add this functionality
        pass

    #--------------------------------------------
    # Disc tool
    def addDisc(self, action):
        self.iface.mapCanvas().setMapTool(self.discTool)
        self.discTool.deactivated.connect(partial(self.toggleChecked, action))
        callingAction = action.sender()
        if callingAction:
            callingAction.setChecked(True)

        #TODO - add this functionality
        pass

    #--------------------------------------------
    # Merge tool
    def mergeFeatures(self, action):
        #TODO - add this functionality
        pass

    #--------------------------------------------
    # Copy tool
    def copyMosaic(self, action):
        #TODO - add this functionality
        pass

    #--------------------------------------------
    # Clear tool
    def clearMosaic(self, action):
        #TODO - add this functionality
        pass

    #--------------------------------------------
    # Toggle which buttons are checked
    def toggleChecked(self, action):
        action.setChecked(False)

    ##--------------Non UI Functions below this point -------------##

    #--------------------------------------------
    # Add temporary layer
    def addDrawingLayer(self):
        #TODO - add this functionality
        pass 

    #--------------------------------------------
    # Remove temporary layer
    def removeDrawingLayer(self):
        #TODO - add this functionality
        pass 

    #--------------------------------------------
    # Remove temporary layer
    def selectByClick(self):
        #TODO - add this functionality
        pass 


    #--------------------------------------------
    # Remove temporary layer
    def bufferByClick(self):
        #TODO - add this functionality
        pass 

    #--------------------------------------------
    # Remove temporary layer
    def selectByArea(self):
        #TODO - add this functionality
        pass 



